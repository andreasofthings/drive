// src/utils.ts
var GAPI_URL = "https://apis.google.com/js/api.js";
var GSI_URL = "https://accounts.google.com/gsi/client";
async function loadApi(api = "client:picker") {
  if (!window.gapi) {
    await injectScript(GAPI_URL);
  }
  await new Promise((r) => {
    window.gapi.load(api, r);
  });
  return window.google;
}
async function requestAccessToken(tokenClientConfig) {
  if (!window.google?.accounts?.oauth2) {
    await injectScript(GSI_URL);
  }
  return new Promise((resolve, reject) => {
    const client = window.google.accounts.oauth2.initTokenClient({
      ...tokenClientConfig,
      callback: resolve,
      error_callback: reject
    });
    client.requestAccessToken();
  });
}
async function injectScript(src) {
  return new Promise((resolve, reject) => {
    if (!document.querySelector(`script[src="${src}"]`)) {
      document.head.appendChild(
        Object.assign(document.createElement("script"), {
          src,
          onload: resolve,
          onerror: reject
        })
      );
    } else {
      resolve();
    }
  });
}
function getNumberAttribute(element, name) {
  const value = element.getAttribute(name);
  return value ? Number(value) : null;
}
var BoolAttrWithDefault = /* @__PURE__ */ ((BoolAttrWithDefault2) => {
  BoolAttrWithDefault2[BoolAttrWithDefault2["FALSE"] = 0] = "FALSE";
  BoolAttrWithDefault2[BoolAttrWithDefault2["TRUE"] = 1] = "TRUE";
  BoolAttrWithDefault2[BoolAttrWithDefault2["DEFAULT"] = 2] = "DEFAULT";
  return BoolAttrWithDefault2;
})(BoolAttrWithDefault || {});
function getBoolAttr(element, name) {
  return element.hasAttribute(name);
}
function getBoolAttrWithDefault(element, name) {
  const attributeValue = element.getAttribute(name)?.toUpperCase();
  if (!attributeValue) {
    return 2 /* DEFAULT */;
  }
  const value = BoolAttrWithDefault[attributeValue];
  if (value !== void 0) {
    return value;
  }
  throw new Error(
    `Invalid value, "${attributeValue}", for attribute ${name}. Must be one of ${Object.keys(BoolAttrWithDefault).filter(Number.isNaN).join(", ")}`
  );
}
function setBoolAttrWithDefault(name, element, setter, instance) {
  const attr = getBoolAttrWithDefault(element, name);
  if (attr === 2 /* DEFAULT */) {
    return instance;
  }
  return setter.call(instance, attr === 1 /* TRUE */);
}

// src/drive-picker/drive-picker-element.ts
var DrivePickerElement = class extends HTMLElement {
  static get observedAttributes() {
    return [
      "app-id",
      "client-id",
      "debounce-delay",
      "developer-key",
      "hide-title-bar",
      "locale",
      "max-items",
      "mine-only",
      "multiselect",
      "nav-hidden",
      "oauth-token",
      "origin",
      "relay-url",
      "scope",
      "title"
    ];
  }
  picker;
  observer;
  google;
  loading;
  debounceTimer;
  /**
   * The visibility of the picker.
   */
  get visible() {
    return Boolean(this.picker?.isVisible());
  }
  /**
   * Controls the visibility of the picker after the picker dialog has been
   * closed. If any of the attributes change, the picker will be rebuilt and
   * the visibility will be reset.
   */
  set visible(value) {
    this.picker?.setVisible(value);
  }
  get tokenClientConfig() {
    const clientId = this.getAttribute("client-id");
    const scope = this.getAttribute("scope") ?? "https://www.googleapis.com/auth/drive.file";
    if (!clientId || !scope) {
      throw new Error("client-id and scope are required attributes");
    }
    return {
      client_id: clientId,
      hd: this.getAttribute("hd") ?? void 0,
      include_granted_scopes: Boolean(
        this.getAttribute("include-granted-scope")
      ),
      login_hint: this.getAttribute("login-hint") ?? void 0,
      prompt: this.getAttribute("prompt") ?? "",
      scope
    };
  }
  attributeChangedCallback() {
    this.scheduleBuild();
  }
  scheduleBuild() {
    clearTimeout(this.debounceTimer);
    this.debounceTimer = window.setTimeout(() => {
      this.build();
    }, getNumberAttribute(this, "debounce-delay") ?? 0);
  }
  async build() {
    this.picker?.dispose();
    await this.loading;
    if (!this.google) return;
    let builder = new this.google.picker.PickerBuilder().setCallback(
      (data) => {
        this.callbackToDispatchEvent(data);
      }
    );
    const appId = this.getAttribute("app-id");
    if (appId !== null) builder = builder.setAppId(appId);
    const developerKey = this.getAttribute("developer-key");
    if (developerKey !== null) builder = builder.setDeveloperKey(developerKey);
    const locale = this.getAttribute("locale");
    if (locale !== null)
      builder = builder.setLocale(locale);
    const maxItems = getNumberAttribute(this, "max-items");
    if (maxItems !== null) builder = builder.setMaxItems(maxItems);
    const origin = this.getAttribute("origin");
    if (origin !== null) builder = builder.setOrigin(origin);
    const relayUrl = this.getAttribute("relay-url");
    if (relayUrl !== null) builder = builder.setRelayUrl(relayUrl);
    const title = this.getAttribute("title");
    if (title !== null) builder = builder.setTitle(title);
    setBoolAttrWithDefault(
      "hide-title-bar",
      this,
      builder.hideTitleBar,
      builder
    );
    const oauthToken = this.getAttribute("oauth-token") ?? await this.requestAccessToken();
    if (!oauthToken) return;
    builder = builder.setOAuthToken(oauthToken);
    if (getBoolAttr(this, "multiselect")) {
      builder = builder.enableFeature(
        this.google.picker.Feature.MULTISELECT_ENABLED
      );
    }
    if (getBoolAttr(this, "mine-only")) {
      builder = builder.enableFeature(this.google.picker.Feature.MINE_ONLY);
    }
    if (getBoolAttr(this, "nav-hidden")) {
      builder = builder.enableFeature(this.google.picker.Feature.NAV_HIDDEN);
    }
    for (const view of this.views) {
      builder = builder.addView(view);
    }
    this.picker = builder.build();
    this.picker.setVisible(true);
  }
  /**
   * The `google.Picker.View` objects to display in the picker as defined by the slot elements.
   */
  get views() {
    const views = nestedViews(this);
    return views.length ? views : ["all"];
  }
  async connectedCallback() {
    this.loading = loadApi().then((google2) => {
      this.google = google2;
    });
    this.observer = new MutationObserver((mutations) => {
      const filteredMutations = mutations.filter(
        (mutation) => mutation.type === "childList" || mutation.type === "attributes" && mutation.target !== this
      );
      if (filteredMutations.length) {
        this.scheduleBuild();
      }
    });
    this.observer?.observe(this, {
      childList: true,
      subtree: true,
      attributes: true
    });
  }
  callbackToDispatchEvent(detail) {
    let eventTypes;
    switch (detail.action) {
      case google.picker.Action.CANCEL:
        eventTypes = ["picker:canceled", "picker-canceled"];
        break;
      case google.picker.Action.PICKED:
        eventTypes = ["picker:picked", "picker-picked"];
        break;
      case google.picker.Action.ERROR:
        eventTypes = ["picker:error", "picker-error"];
        break;
      default:
        return;
    }
    for (const eventType of eventTypes) {
      this.dispatchEvent(
        new CustomEvent(eventType, {
          detail
        })
      );
    }
  }
  async requestAccessToken() {
    return requestAccessToken(this.tokenClientConfig).then((response) => {
      const { access_token: token } = response;
      if (!token) {
        this.dispatchEvent(
          new CustomEvent("picker:oauth:error", {
            detail: response
          })
        );
        this.dispatchEvent(
          new CustomEvent("picker-oauth-error", {
            detail: response
          })
        );
        return void 0;
      }
      this.dispatchEvent(
        new CustomEvent("picker:authenticated", { detail: { token } })
      );
      this.dispatchEvent(
        new CustomEvent("picker-oauth-response", { detail: response })
      );
      this.dispatchEvent(
        new CustomEvent("picker:oauth:response", { detail: response })
      );
      this.dispatchEvent(
        new CustomEvent("picker-oauth-response", { detail: response })
      );
      return token;
    }).catch((error) => {
      this.dispatchEvent(
        new CustomEvent("picker:oauth:error", {
          detail: error
        })
      );
      this.dispatchEvent(
        new CustomEvent("picker-oauth-error", {
          detail: error
        })
      );
      return void 0;
    });
  }
  disconnectedCallback() {
    this.picker?.dispose();
  }
};
function isView(obj) {
  return "view" in obj && obj.view instanceof window.google.picker.View;
}
function filterElementsToViewOrViewGroup(elements) {
  return elements.filter((element) => isView(element)).map((element) => element.view);
}
function nestedViews(target, selector = "*") {
  return filterElementsToViewOrViewGroup(
    Array.from(target.querySelectorAll(selector))
  );
}

// src/drive-picker/drive-picker-docs-view-element.ts
var DrivePickerDocsViewElement = class extends HTMLElement {
  static get observedAttributes() {
    return [
      "enable-drives",
      "file-ids",
      "include-folders",
      "mime-types",
      "mode",
      "owned-by-me",
      "parent",
      "query",
      "select-folder-enabled",
      "starred",
      "view-id"
    ];
  }
  /**
   * Gets the Google Drive Picker view based on the current attribute values.
   * @returns {google.picker.DocsView} The Google Drive picker view.
   */
  get view() {
    const view = new window.google.picker.DocsView(this.viewId);
    setBoolAttrWithDefault("enable-drives", this, view.setEnableDrives, view);
    setBoolAttrWithDefault(
      "include-folders",
      this,
      view.setIncludeFolders,
      view
    );
    setBoolAttrWithDefault("owned-by-me", this, view.setOwnedByMe, view);
    setBoolAttrWithDefault(
      "select-folder-enabled",
      this,
      view.setSelectFolderEnabled,
      view
    );
    setBoolAttrWithDefault("starred", this, view.setStarred, view);
    const mimetypes = this.getAttribute("mime-types");
    if (mimetypes !== null) view.setMimeTypes(mimetypes);
    const fileIds = this.getAttribute("file-ids");
    if (fileIds !== null) view.setFileIds(fileIds);
    const mode = this.getAttribute("mode");
    if (mode)
      view.setMode(
        google.picker.DocsViewMode[mode]
      );
    const parent = this.getAttribute("parent");
    if (parent !== null) view.setParent(parent);
    const query = this.getAttribute("query");
    if (query !== null) view.setQuery(query);
    return view;
  }
  get viewId() {
    const viewId = this.getAttribute("view-id");
    return viewId ? window.google.picker.ViewId[viewId] : void 0;
  }
};
export {
  DrivePickerDocsViewElement,
  DrivePickerElement
};
//# sourceMappingURL=index.js.map